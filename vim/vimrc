set nocompatible        " not compatible with vim

set nobackup            " keep a backup file
set showcmd             " display incomplete commands
set incsearch           " do incremental searching

map Q gq                " Don't use Ex mode, use Q for formatting

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

syntax on               "enable syntax highlight
set hlsearch            "enable highlight search

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
au!

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78

autocmd BufEnter * Rvm "Use rvm when entering a buffer

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
augroup END

augroup __RUBY
  au!
  function! ExecuteRubyUnitTest()
    let s:line_no = search('^\s*def\s*test_', 'bcnW')
    if s:line_no
      exec '!_vim_ruby -Ilib,test % -n ' . split(getline(s:line_no))[1] . ' -v'
    else
      echo "Can't find a test!"
    endif
  endfunction
  
  " ruby shortcuts
"  autocmd BufReadPost *.rb imap <D-r> <ESC>:w<CR>:!_vim_ruby -Ilib,test % -v<CR>
"  autocmd BufReadPost *.rb nmap <D-r> <ESC>:w<CR>:!_vim_ruby -Ilib,test % -v<CR>

"  autocmd BufReadPost *_test.rb imap <D-R> <ESC>:call ExecuteRubyUnitTest()<CR>
"  autocmd BufReadPost *_test.rb nmap <D-R> <ESC>:call ExecuteRubyUnitTest()<CR>

" automatically strip whitespace before save
"  autocmd FileType ruby autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
  
augroup END

augroup __CLOJURE
  " clojure shortcuts
  autocmd BufRead,BufNewFile *.clj imap <D-r> <ESC>:call vimclojure#EvalFile() %<CR>i
  autocmd BufRead,BufNewFile *.clj nmap <D-r> <ESC>:call vimclojure#EvalFile()<CR>

  autocmd BufRead,BufNewFile *.clj imap <D-R> <ESC>:call vimclojure#EvalToplevel() %<CR>i
  autocmd BufRead,BufNewFile *.clj nmap <D-R> <ESC>:call vimclojure#EvalToplevel()<CR>
augroup END

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif

" Navigate between windows easier
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" Default to using a stack style editing (current window always max)
" set winminheight=0
" au VimEnter * set winheight=999
" set splitbelow

" Keep 2 lines of context when scrolling
set scrolloff=2

"set ignorecase
set smartcase

set directory=~/.vim/swp/   " Don't litter the filesystem with .swp files

nmap <silent> <C-N><C-N> :set invnumber<CR>
nmap <silent> <C-W><C-W> :set invwrap<CR>
nmap <silent> <C-G><C-G> :let &background = ( &background == "dark" ? "light" : "dark" )<CR>
nmap <silent> <C-Z><C-Z> :let &foldcolumn = ( &foldcolumn == 0 ? 5 : 0 )<CR>

" Change from using stack style editing to normal, equal sized windows and back
nmap <silent> <C-S> :let &winheight = ( &winheight == 999 ? 1 : 999)<CR><C-W>=

" Open/close folds with space
nmap <Space> za

" Easier interaction with clipboard
"vmap <Leader>y "+y
"nmap <Leader>p "+gP
vmap ,y "+y
nmap ,p "+gP

" Select some text and search with it
vmap // y/<C-R>"<CR>
vmap ?? y?<C-R>"<CR>

" Wrapped line movement
map <Up> gk
map <Down> gj

" Goto file in another window and navigate back to this window
nmap <M-F><M-T> <C-W><C-F><C-K>

" Execute macro in the 'q' register.
map <C-Q> @q

" More useful mappings to find the latest { or }
nmap [[ [{
nmap ]] ]}

" map nerd tree
let Tlist_Close_On_Select=1
nmap ,n :NERDTreeClose<CR>:NERDTreeToggle<CR>
nmap ,m :NERDTreeClose<CR>:NERDTreeFind<CR>
nmap ,N :NERDTreeClose<CR>

" Store the bookmarks file
let NERDTreeBookmarksFile=expand("$HOME/.vim/NERDTreeBookmarks")

" Don't display these kinds of files
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '\.gem$']

let NERDTreeShowBookmarks=1       " Show the bookmarks table on startup
let NERDTreeShowFiles=1           " Show hidden files, too
let NERDTreeShowHidden=1
let NERDTreeQuitOnOpen=1          " Quit on opening files from the tree
let NERDTreeHighlightCursorline=1 " Highlight the selected entry in the tree
let NERDTreeMouseMode=2           " Use a single click to fold/unfold directories
                                  " and a double click to open files

filetype plugin on

let html_use_css = 1
let g:lisp_rainbow = 1

" let vimclojure#ParenRainbow = 1
let vimclojure#HighlightBuiltins = 1
let vimclojure#WantNailgun = 1
let vimclojure#NailgunClient = "/Users/ketanpadegaonkar/bin/ng"
let vimclojure#SplitPos = 'bottom'
let vimclojure#SplitSize = 10

let g:xml_syntax_folding=1
let NERDTreeQuitOnOpen = 1

colorscheme desert
set nowrap
set number
set visualbell

" Use man in a new window
runtime! ftplugin/man.vim
nmap K <Leader>K
vmap K "my:Man <C-R>m<CR>

" Change directory of the current buffer to be the same as the file
command! -n=0 Cdl lcd %:p:h

" If forgot to edit a file with sudo
command! W w !sudo tee % > /dev/null

"No more accidently hitting <F1>
map <F1> <Nop>

set viminfo^=!        " Add recently accessed projects menu (project plugin)

" Minibuffer Explorer Settings
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

" alt+n or alt+p to navigate between entries in QuickFix
map <silent> <m-p> :cp <cr>
map <silent> <m-n> :cn <cr>

" Change which file opens after executing :Rails command
let g:rails_default_file='config/database.yml'
" enable rails menus
let g:rails_menu=2

set cf                      " Enable error files & error jumping.
set clipboard+=unnamed      " Yanks go on clipboard instead.
set history=256             " Number of things to remember in history.
set autowrite               " Writes on make/shell commands
set ruler                   " Ruler on
set nu                      " Line numbers on
set nowrap                  " Line wrapping off
set timeoutlen=250          " Time to wait after ESC (default causes an annoying delay)

" colorscheme vividchalk    " Uncomment this to set a default theme

" Formatting (some of these are for coding in C and C++)
set tabstop=2         " Tabs are 2 spaces
set backspace=2       " Backspace over everything in insert mode
set shiftwidth=2      " Tabs under smart indent
set softtabstop=2     " Use spaces every 2 characters instead of tabs
set expandtab

set nocp incsearch

set cinoptions=:0,p0,t0
set cinwords=if,else,while,do,for,switch,case
set formatoptions=tcqr
set cindent
set autoindent
set smarttab

" Visual
set showmatch  " Show matching brackets.
set mat=5  " Bracket blinking.
" set list
" set lcs=tab:\ \ ,eol:$,trail:~,extends:>,precedes:<   " Show $ at end of line and trailing space as ~

set novisualbell  " No blinking .
set noerrorbells  " No noise.
set t_vb= 
set laststatus=2  " Always show status line.

" gvim specific
set mousehide  " Hide mouse after chars typed
set mouse=a  " Mouse in all modes

helptags ~/.vim/doc    " add local help!

set guifont=Monaco:h14   " fonts for macvim

set statusline=%{fugitive#statusline()}\ <%F%h%m%r%h%w%y\ %{&ff}\ %{exists('g:loaded_rvm')?rvm#statusline():''}%=\ %l:%c%V\ %L\ %P

" display EOL character
set list lcs=eol:¬,tab:··
" the color of the EOL character
hi NonText guifg=gray30 guibg=grey20   

"Command-T configuration
let g:CommandTMatchWindowAtTop=1
let g:CommandTAcceptSelectionMap='<M-CR>'
let g:CommandTAcceptSelectionTabMap='<CR>'

" press f2 to disable all smartness when pasting
set pastetoggle=<F2>

" no more :wq, just ;wq
nnoremap ; :


set timeoutlen=1000 "set the key delay when using shortcuts

set exrc            " enable per-directory .vimrc files

" Rails configuration
autocmd User Rails Rnavcommand step features/step_definitions -glob=**/* -suffix=_steps.rb
autocmd User Rails Rnavcommand config config -glob=**/* -suffix=.rb -default=routes
autocmd User Rails map <Leader>p :Rstep<CR>
autocmd User Rails map <Leader>sp :RSstep<CR>
autocmd User Rails map <Leader>tp :RTstep<CR>
autocmd User Rails map <Leader>m :Rmodel<CR>
autocmd User Rails map <Leader>c :Rcontroller<CR>
autocmd User Rails map <Leader>v :Rview<CR>
autocmd User Rails map <Leader>u :Runittest<CR>
autocmd User Rails map <Leader>f :Rfunctionaltest<CR>
autocmd User Rails map <Leader>i :Rintegrationtest<CR>
autocmd User Rails map <Leader>h :Rhelper<CR>
autocmd User Rails map <Leader>tm :RTmodel<CR>
autocmd User Rails map <Leader>tc :RTcontroller<CR>
autocmd User Rails map <Leader>tv :RTview<CR>
autocmd User Rails map <Leader>tu :RTunittest<CR>
autocmd User Rails map <Leader>tf :RTfunctionaltest<CR>
autocmd User Rails map <Leader>ti :RTintegrationtest<CR>
autocmd User Rails map <Leader>sm :RSmodel<CR>
autocmd User Rails map <Leader>sc :RScontroller<CR>
autocmd User Rails map <Leader>sv :RSview<CR>
autocmd User Rails map <Leader>su :RSunittest<CR>
autocmd User Rails map <Leader>sf :RSfunctionaltest<CR>
autocmd User Rails map <Leader>si :RSintegrationtest<CR>
autocmd User Rails map <Leader>g :Rconfig<CR>
autocmd User Rails map <Leader>sg :RSconfig<CR>
autocmd User Rails map <Leader>tg :RTconfig<CR>

" Emacs style ctrl-a & ctrl-e in insert mode
imap <C-a> <ESC>I
imap <C-e> <ESC>A

map <C-a> ^
map <C-e> $

" enhanced mode command line completion
set wildmenu
set wildmode=list:longest,full "Complete longest common string, then each full match

" write all files when navigating away to a different file/buffer/exec
set autowrite

" automatically reload files changed outside of vim
set autoread

" persistent undo
set undodir=~/.vim/swp
set undofile


" Insert New Line without going into insert mode
map <S-Enter> O<ESC> 
map <Enter> o<ESC>
set fo-=r " do not insert a comment leader after an enter, (no work, fix!!)

" requires unimpaired
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv


"Tagbar
let g:tagbar_autoclose = 1 "autoclose on selection

" Ignore certain patterns by defaulg
set wildignore=*.class,*.o,*.tmp,*.bak,*.gem,vendor/jruby/*,vendor/twist*,vendor/**/*_spec.rb,vendor/**/*_test.rb,log/*,tmp/*

" reload vimrc when saved
autocmd BufWritePost .vimrc source %

" highlight ack search terms
let g:ackhighlight=1

" Save all buffers on losing focus
autocmd BufLeave,FocusLost * wall

" Open buffers in their own tab, breaks stuff
"autocmd BufAdd,BufNewFile * nested tab sball


" Map CTRL-] to show tag list on multiple matches and open in new tab
map <C-]> :tab split<CR>:exec("tjump ".expand("<cword>"))<CR>
imap <C-]> <ESC><C-]>
